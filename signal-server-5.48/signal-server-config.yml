# twilio: # twilio configuration for sms otp
#   accountId: AC731f045cf41a05a3143e3ad1bcf6dccc # your account id
#   accountToken: a013f89478a7882f246bb10c005daccc # your account token
#   localDomain: signal-poc.vispdevops.com # your domain
#   numbers:
#     - "+19417578202" # your twilio phone numbers
twilio: # twilio configuration for sms otp
  accountId:  # Twilio SID
  accountToken:  # Twilio account token
  nanpaMessagingServiceSid:  # Twilio SID for the messaging service to use for NANPA.
  messagingServiceSid: # Twilio SID for the message service to use for non-NANPA.
  localDomain: # Domain Twilio can connect back to for calls. Should be domain of your service.
  iosVerificationText: "verification code is - %s" # Text to use for the verification message on iOS. Will be passed to String.format with the verification code as argument 1.
  androidNgVerificationText: "verification code is - %s" # Text to use for the verification message on android-ng client types. Will be passed to String.format with the verification code as argument 1.
  android202001VerificationText: "verification code is - %s" # Text to use for the verification message on android-2020-01 client types. Will be passed to String.format with the verification code as argument 1.
  android202103VerificationText: "verification code is - %s" # Text to use for the verification message on android-2021-03 client types. Will be passed to String.format with the verification code as argument 1.
  genericVerificationText: "verification code is - %s" # Text to use when the client type is unrecognized. Will be passed to String.format with the verification code as argument 1.

cacheCluster:
  urls:
    - redis://127.0.0.1:7000/
appConfig: # AWS app config
  application: signal-poc
  environment: production
  configuration: config.yml

metricsCluster: # redis cluster
  urls:
    - redis://127.0.0.1:7000/
    - redis://127.0.0.1:7001/
    - redis://127.0.0.1:7002/
    - redis://127.0.0.1:7003/
micrometer:

paymentsService:
  userAuthenticationTokenSharedSecret: #
  fixerApiKey: #
  paymentCurrencies:
    - USD
clientPresenceCluster:
  urls:
    - redis://127.0.0.1:7000/
    - redis://127.0.0.1:7001/
    - redis://127.0.0.1:7002/
    - redis://127.0.0.1:7003/
messageDynamoDb:
  region: ap-south-1 # dynomo db bucket region
  tableName: SignalMessages # table name

keysDynamoDb:
  region: ap-south-1 # dynomo db bucket region
  tableName: SignalKeys # table name

backupService:
  backupCaCertificate: |
    -----BEGIN CERTIFICATE-----
    
    -----END CERTIFICATE-----
  uri: # signal server domain
  userAuthenticationTokenSharedSecret:  # head -c 16 /dev/urandom | hexdump -ve '1/1 "%.2x"'

storageService:
  uri: # signal server domain
  storageCaCertificate: |
    -----BEGIN CERTIFICATE-----
    
     -----END CERTIFICATE-----
  userAuthenticationTokenSharedSecret:  # head -c 16 /dev/urandom | hexdump -ve '1/1 "%.2x"'

push:
  queueSize: 200

turn: # turn server configuration for voice & video call
  secret: xxxxx # your turn server's secret
  uris:
    - stun:domain.com:3478 # change to your turn server domain
    - stun:domain.com:5349 # change to your turn server domain
    - turn:domain.com:5349?transport=udp # change to your turn server domain
    - turn:domain.com:3478?transport=udp # change to your turn server domain

# cache: # redis server for cache cluster
#   url: redis://127.0.0.1:7000/cache # change to your redis server
#   replicaUrls:
#     - redis://127.0.0.1:7000/cacheReplica # change to your redis server

directory:
  # redis: # redis server for directory cluster
  #   url: redis://127.0.0.1:7000/directory # change to your redis server
  #   replicaUrls:
  #     - redis://127.0.0.1:7000/directoryReplica # change to your redis server
  client: # for communication with cds
    userAuthenticationTokenSharedSecret:  # head -c 16 /dev/urandom | hexdump -ve '1/1 "%.2x"'
    userAuthenticationTokenUserIdSecret:  # head -c 16 /dev/urandom | hexdump -ve '1/1 "%.2x"'
  sqs: # sqs for queueing
    accessKey:  # your aws iam access key
    accessSecret:  # your aws iam access secret
    queueUrls:
      -  # your fifo queue url

  server:
    - replicationName: "singnal-replica"
      replicationUrl: http://127.0.0.1:9090 # cds replication endpoint base url
      replicationPassword: mypassword # cds replication endpoint password
      replicationCaCertificate: |
        -----BEGIN CERTIFICATE-----
        

        -----END CERTIFICATE-----

messageCache: # redis server for message store cache
  cluster:
    urls:
      - redis://127.0.0.1:7000/ # change to your redis server

awsAttachments: # aws s3 configuration
  accessKey:  # your aws iam access key
  accessSecret:  # your aws iam access secret
  bucket:  # your s3 bucket name
  region: ap-south-1 # your region

cdn: # aws cdn configuration
  accessKey:  # your aws iam access key
  accessSecret:  # your aws iam access secret
  bucket:  # your s3 bucket name
  region:  # your region

gcpAttachments: # gcp storage configuration
  domain: #GCP domain name
  email:  # mail
  maxSizeInBytes: 1000000
  pathPrefix: /
  rsaSigningKey: "-----BEGIN PRIVATE KEY-----\n-----END PRIVATE KEY-----\n"

pubsub: # redis server for pubsub cache
  url: redis://127.0.0.1:7000/cache # change to your redis server
  replicaUrls:
    - redis://127.0.0.1:7000/cacheReplica # change to your redis server

remoteConfig: # remote configuration token
  authorizedTokens:
    - dummy

zkConfig: # zkgroup config, run using your build jar
  serverSecret:  # java -jar TextSecure.jar zkparams
  serverPublic:  # java -jar TextSecure.jar zkparams
  enabled: true

accountsDatabase: # database for account
  driverClass: org.postgresql.Driver
  user: postgres # change to your psql username
  password: postgres # change to your psql password
  url: jdbc:postgresql://127.0.0.1:5432/accountdb #change to your psql url, port, and database name

# messageStore: # database for message
#   driverClass: org.postgresql.Driver
#   user: postgres # change to your psql username
#   password: postgres # change to your psql password
#   url: jdbc:postgresql://127.0.0.1:5432/messagedb #change to your psql url, port, and database name

abuseDatabase: # database for abuse
  driverClass: org.postgresql.Driver
  user: postgres # change to your psql username
  password: postgres # change to your psql password
  url: jdbc:postgresql://127.0.0.1:5432/abusedb #change to your psql url, port, and database name

gcm: # firebase messaging
  senderId:  # your sender id
  apiKey:  # your api key

recaptcha: # google recaptcha v3
  secret:  # your recaptcha secret

accountDatabaseCrawler: # crawler for account database
  chunkSize: 1000
  chunkIntervalMs: 1000000

apn: # apple push nottification, just use this value if you don't plan to develop signal ios
  teamId: "signal"
  signingKey: |
    -----BEGIN CERTIFICATE-----
    
    -----END CERTIFICATE-----

  keyId: |

    -----BEGIN RSA PRIVATE KEY-----
    
    -----END RSA PRIVATE KEY-----
  bundleId: com.notused
  sandbox: true

unidentifiedDelivery: # unidentified delivery or untrusted sender root, run using your build jar & config
  certificate: 
  privateKey: 
  expiresDays: 365

voiceVerification: # voice otp verification, afaik it use vox service
  url: https://server.chatapp.net
  locales:
    - en

pushSchedulerCluster: # redis server for push scheduler
  urls:
    - redis://127.0.0.1:7000 # change to your redis server

logging:
  level: INFO
server: # server configuration
  applicationConnectors:
    - type: http
      port: 8080 # your signal server will run on this port
  adminConnectors:
    - type: http
      port: 8081 # your signal server admin will run on this port
